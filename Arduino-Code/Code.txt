#include <Servo.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

// Define pins for the IR sensor and Ultrasonic Sensor
const int irPin = 3; // IR sensor pin
#define TRIG_PIN 12
#define ECHO_PIN 11

// Servo for waste compartment
Servo servo1;
const int potPin = A1; // Moisture sensor pin
int soil = 0;
int fsoil = 0;
int maxDryValue = 1;
int Ultra_Distance = 15; // Simulated distance between IR sensor and moisture sensor (in cm)

// OLED display settings
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1 // No reset pin
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Maximum height of the dustbin (in cm)
#define MAX_HEIGHT 25 // Set the dustbin height to 25 cm
#define FULL_THRESHOLD 5 // Threshold distance to consider the dustbin full (in cm)
#define EMPTY_THRESHOLD 25 // Threshold distance to consider the dustbin empty (in cm)

void setup() {
  // Start serial communication
  Serial.begin(9600);

  // Set up the IR sensor pin and Ultrasonic sensor pins
  pinMode(irPin, INPUT); // Set the IR sensor pin as input
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);

  // Attach the servo to pin 9
  servo1.attach(9);

  // Initialize OLED with default I2C address 0x3C
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Loop forever if the display is not found
  }

  // Clear the screen and set text size
  display.clearDisplay();
  display.setTextSize(1); // Normal 1:1 pixel scale
  display.setTextColor(SSD1306_WHITE); // White text
  display.setCursor(0, 0); // Set cursor at top-left corner
  display.setCursor(0, 10); // Move cursor down
  display.print(F("Range: 0 to 25 cm"));
  display.display();
  delay(2000); // Wait for 2 seconds
}

void loop() {
  int soil = 0;
  long duration;
  int distance;

  // Read the IR sensor status (either HIGH or LOW)
  int irStatus = digitalRead(irPin);

  // If the IR sensor detects an object (IR sensor is LOW), simulate the same behavior as ultrasonic detection
  if (irStatus == LOW) { // Object detected by IR sensor
    delay(1000); // Wait for the object to be stable

    // Read soil moisture 3 times to get an average
    fsoil = 0;
    for (int i = 0; i < 3; i++) {
      soil = analogRead(potPin);
      soil = constrain(soil, 20, 1023);
      fsoil = (map(soil, 485, 1023, 100, 0)) + fsoil;
      delay(75);
    }

    fsoil = fsoil / 3; // Calculate average soil moisture

    // Debugging: Print moisture readings to serial monitor
    Serial.print("Humidity: ");
    Serial.print(fsoil);
    Serial.println("%");

    // If the soil is wet, open the servo; if dry, close it.
    if (fsoil > maxDryValue) {
      delay(1000);
      Serial.println(" ==> Wet Waste");
      servo1.write(170); // Servo opens
      delay(3000); // Wait for 3 seconds before going back to start
      servo1.write(90); // Servo moves to neutral position

      // Force the loop to restart after wet waste is detected
      return; // This will restart the loop from the top
    } else {
      delay(1000);
      Serial.println(" ==> Dry Waste");
      servo1.write(10); // Servo closes
      delay(3000); // Wait for 3 seconds before going back to start
      servo1.write(90); // Servo moves to neutral position
    }
  }

  // Ultrasonic sensor: Calculate the distance to the dustbin's height
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);

  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);

  duration = pulseIn(ECHO_PIN, HIGH);
  distance = duration * 0.0344 / 2;

  // Debugging: Print the distance to the Serial Monitor
  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.println(" cm");

  // Calculate remaining capacity as a percentage
  float remainingCapacity = map(distance, 0, MAX_HEIGHT, 100, 0); // Reverse the mapping

  // Handle invalid readings
  if (distance <= 0 || distance > MAX_HEIGHT) {
    remainingCapacity = 0; // Invalid reading, treat it as full
  }

  // Clear the previous display data
  display.clearDisplay();

  // Display the updated status on the OLED screen
  display.setCursor(0, 0);
  display.print(F(" "));

  // Check if the dustbin is empty (distance > 25 cm)
  if (distance > EMPTY_THRESHOLD) {
    display.println(F("Dustbin is empty"));
  }
  // Check if the dustbin is full
  else if (distance <= FULL_THRESHOLD) {
    display.println(F("Dustbin is full"));
  }
  // For remaining capacity percentage between 0 and 25 cm
  else {
    display.print(F("Remaining Capacity: "));
    display.print(remainingCapacity);
    display.println(F("%"));
  }

  // Update the display
  display.display();

  // Wait a little before taking another reading
  delay(1000); // Update every 1 second
}